s_norm_dat$consistency = gsub(" ", "", paste(s_norm_dat$consistency,'sistent',''), fixed = TRUE)
super_data = merge(super_data, s_norm_dat, by.x=c("Consistent", "SceneImage"), by.y=c("consistency","scene"))
stopifnot(all(super_data$probe.x == super_data$probe.y)) # Check that everything is merged correctly
#### super data preprocessing
super_data$response = as.factor(super_data$response)
super_data$test_condition = as.factor(super_data$test_condition)
super_data$Inverted = as.factor(super_data$Inverted)
super_data$SceneImage = as.factor(super_data$SceneImage)
super_data$sbj_id = as.factor(super_data$sbj_id)
super_data$rating = scale(super_data$rating)
super_data$Duration = factor(super_data$Duration, ordered=TRUE)
super_data$Consistent = factor(super_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
#### Merge basic and super data
full_data = rbind(basic_data, super_data)
#### General Preprocessing
full_data$level = ifelse(substr(full_data$test_condition, 1, 5) == "basic","Basic","Super")
full_data$level = as.factor(full_data$level)
full_data$response = as.factor(full_data$response)
full_data$test_condition = as.factor(full_data$test_condition)
full_data$Inverted = as.factor(full_data$Inverted)
full_data$SceneImage = as.factor(full_data$SceneImage)
full_data$sbj_id = as.factor(full_data$sbj_id)
full_data$Duration = factor(full_data$Duration, ordered=TRUE)
full_data$rating = scale(full_data$rating)
full_data$Consistent = factor(full_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
str(full_data)
str(basic_data)
knitr::opts_chunk$set(echo=FALSE, cache=TRUE)
setwd("~/Documents/Graduate Files/InvertedScenes/invertedScenes-data")
raw_data = read.csv("invrb01-exp1_2021_02_17.csv")
library(plyr)
library(tidyverse)
library(sjPlot)
library(ggpubr)
library(lme4)
source('sbj_check.R')
source('re_plots.R')
# Exclude subjects who did not pass attention check, or who answered only "No" for all trials
data=attcheckexclude(raw_data)
data=responseExclude(data)
get_n_sbj(data, 6)
basic_data = data %>%
filter(Consistent != "AttentionCheck", substr(test_condition, 1, 5) == "basic")
#### Fix duplicate IDs in basic data
basic_data = fix_dupe_ids(basic_data)
b_norm_dat = read.csv("b_norm.csv") # Load in norming data
basic_data$SceneImage = substr(basic_data$SceneImage,1,nchar(basic_data$SceneImage)-4)
stopifnot(all(b_norm_dat$scene %in% basic_data$SceneImage)) # Check that all scene names match
b_norm_dat$consistency = gsub(" ", "", paste(b_norm_dat$consistency,'sistent',''), fixed = TRUE)
basic_data = merge(basic_data, b_norm_dat, by.x=c("Consistent", "SceneImage"), by.y=c("consistency","scene"))
stopifnot(all(basic_data$probe.x == basic_data$probe.y)) # Check that everything is merged correctly
#### basic data preprocessing
basic_data$response = as.factor(basic_data$response)
basic_data$test_condition = as.factor(basic_data$test_condition)
basic_data$Inverted = as.factor(basic_data$Inverted)
basic_data$SceneImage = as.factor(basic_data$SceneImage)
basic_data$sbj_id = as.factor(basic_data$sbj_id)
basic_data$rating = scale(basic_data$rating)
basic_data$Duration = factor(basic_data$Duration, ordered=TRUE)
basic_data$Consistent = factor(basic_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
#### super data set up
super_data = data %>%
filter(Consistent != "AttentionCheck", substr(test_condition, 1, 5) == "super")
s_norm_dat = read.csv("s_norm.csv") # Load in norming data
super_data$SceneImage = substr(super_data$SceneImage,1,nchar(super_data$SceneImage)-4)
stopifnot(all(s_norm_dat$scene %in% super_data$SceneImage)) # Check that all scene names match
s_norm_dat$consistency = gsub(" ", "", paste(s_norm_dat$consistency,'sistent',''), fixed = TRUE)
super_data = merge(super_data, s_norm_dat, by.x=c("Consistent", "SceneImage"), by.y=c("consistency","scene"))
stopifnot(all(super_data$probe.x == super_data$probe.y)) # Check that everything is merged correctly
#### super data preprocessing
super_data$response = as.factor(super_data$response)
super_data$test_condition = as.factor(super_data$test_condition)
super_data$Inverted = as.factor(super_data$Inverted)
super_data$SceneImage = as.factor(super_data$SceneImage)
super_data$sbj_id = as.factor(super_data$sbj_id)
super_data$rating = scale(super_data$rating)
super_data$Duration = factor(super_data$Duration, ordered=TRUE)
super_data$Consistent = factor(super_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
rbind(basic_data, super_data)
full_data = rbind(basic_data, super_data)
str(full_data)
knitr::opts_chunk$set(echo=FALSE, cache=TRUE)
setwd("~/Documents/Graduate Files/InvertedScenes/invertedScenes-data")
raw_data = read.csv("invrb01-exp1_2021_02_17.csv")
library(plyr)
library(tidyverse)
library(sjPlot)
library(ggpubr)
library(lme4)
source('sbj_check.R')
source('re_plots.R')
# Exclude subjects who did not pass attention check, or who answered only "No" for all trials
data=attcheckexclude(raw_data)
data=responseExclude(data)
get_n_sbj(data, 6)
## ---- SETTING UP DATA ----
#### basic data set up
basic_data = data %>%
filter(Consistent != "AttentionCheck", substr(test_condition, 1, 5) == "basic")
#### Fix duplicate IDs in basic data
basic_data = fix_dupe_ids(basic_data)
b_norm_dat = read.csv("b_norm.csv") # Load in norming data
basic_data$SceneImage = substr(basic_data$SceneImage,1,nchar(basic_data$SceneImage)-4)
stopifnot(all(b_norm_dat$scene %in% basic_data$SceneImage)) # Check that all scene names match
b_norm_dat$consistency = gsub(" ", "", paste(b_norm_dat$consistency,'sistent',''), fixed = TRUE)
basic_data = merge(basic_data, b_norm_dat, by.x=c("Consistent", "SceneImage"), by.y=c("consistency","scene"))
stopifnot(all(basic_data$probe.x == basic_data$probe.y)) # Check that everything is merged correctly
#### super data set up
super_data = data %>%
filter(Consistent != "AttentionCheck", substr(test_condition, 1, 5) == "super")
s_norm_dat = read.csv("s_norm.csv") # Load in norming data
super_data$SceneImage = substr(super_data$SceneImage,1,nchar(super_data$SceneImage)-4)
stopifnot(all(s_norm_dat$scene %in% super_data$SceneImage)) # Check that all scene names match
s_norm_dat$consistency = gsub(" ", "", paste(s_norm_dat$consistency,'sistent',''), fixed = TRUE)
super_data = merge(super_data, s_norm_dat, by.x=c("Consistent", "SceneImage"), by.y=c("consistency","scene"))
stopifnot(all(super_data$probe.x == super_data$probe.y)) # Check that everything is merged correctly
#### Merge basic and super data
full_data = rbind(basic_data, super_data)
#### General Preprocessing
full_data$level = ifelse(substr(full_data$test_condition, 1, 5) == "basic","Basic","Super")
full_data$level = as.factor(full_data$level)
full_data$response = as.factor(full_data$response)
full_data$test_condition = as.factor(full_data$test_condition)
full_data$Inverted = as.factor(full_data$Inverted)
full_data$SceneImage = as.factor(full_data$SceneImage)
full_data$sbj_id = as.factor(full_data$sbj_id)
full_data$Duration = factor(full_data$Duration, ordered=TRUE)
full_data$rating = scale(full_data$rating)
full_data$Consistent = factor(full_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
#### basic data preprocessing
basic_data$response = as.factor(basic_data$response)
basic_data$test_condition = as.factor(basic_data$test_condition)
basic_data$Inverted = as.factor(basic_data$Inverted)
basic_data$SceneImage = as.factor(basic_data$SceneImage)
basic_data$sbj_id = as.factor(basic_data$sbj_id)
basic_data$rating = scale(basic_data$rating)
basic_data$Duration = factor(basic_data$Duration, ordered=TRUE)
basic_data$Consistent = factor(basic_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
#### super data preprocessing
super_data$response = as.factor(super_data$response)
super_data$test_condition = as.factor(super_data$test_condition)
super_data$Inverted = as.factor(super_data$Inverted)
super_data$SceneImage = as.factor(super_data$SceneImage)
super_data$sbj_id = as.factor(super_data$sbj_id)
super_data$rating = scale(super_data$rating)
super_data$Duration = factor(super_data$Duration, ordered=TRUE)
super_data$Consistent = factor(super_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
str(full_data)
str(basic_data)
str(super_data)
?plot_model
load("/Users/alanzhihaolu/Documents/Graduate Files/InvertedScenes/invertedScenes-data/Final_Analyses_v2_cache/html/mdl1full_cont_c194656b51385da6a20bbcdf3c4f11b2.RData")
mdl1full_cont
load("/Users/alanzhihaolu/Documents/Graduate Files/InvertedScenes/invertedScenes-data/Final_Analyses_v2_cache/html/mdl1full_e382ec559d1c91c88c4cae709258f697.RData")
load("/Users/alanzhihaolu/Documents/Graduate Files/InvertedScenes/invertedScenes-data/Final_Analyses_v2_cache/html/mdl2full_244b290139059033624025186254c04a.RData")
mdl1full_cont = glmer(response ~ rating*Inverted*Duration*level +
(Inverted*rating | sbj_id) + (Inverted*rating | SceneImage),
data = full_data, family = binomial,
control = glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e5)))
summary(mdl1full_cont)
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what = get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
M = get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
M
M = get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
M
?get_model_data
M = get_model_data(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))
M
plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what = plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what
what
what[[1]]
what = plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
what
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
plot_model(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
plot_model(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))
what = plot_model(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))[[11]]
what
what = plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what
what[[1]]
what[[2]]
what[[3]]
what[[4]]
what[[5]]
plot_model(mdl2full_cont, type="int")[[1]]
plot_model(mdl1full_cont, type="int")[[1]]
what = summary(mdl1full_cont)
what$coefficients
ranef(mdl1full_cont)
summary(mdl1full_cont)@REmat
VarCorr(mdl1full_cont)
what = VarCorr(mdl1full_cont)
what
what$sbj_id
what$sbj_id$stddev
nani - what$sbj_id
nani = what$sbj_id
nani$
a
what$SceneImage
attributes(what)
attributes(what$SceneImage)
attributes(what$SceneImage)$stddev
attributes(what$sbj_id)$stddev
summary(mdl1full_cont)
attributes(what$sbj_id)$stddev
kable(VarCorr(mdl1full_cont))
knitr::kable(VarCorr(mdl1full_cont))
print(VarCorr(mdl))
print(VarCorr(mdl1full_cont))
plot_model(mdl1full_cont)
what = plot_model(mdl1full_cont, type="int")[[1]]
what$data
what = plot_model(mdl1full_cont, type="pred",terms=c("rating","Inverted","Duration","level"))
what
what = get_model_data(mdl1full_cont, type="pred",terms=c("rating","Inverted","Duration","level"))
what = plot_model(mdl1full_cont, type="pred",terms=c("rating","Inverted","Duration","level"))
D
what[[1]]
what[[2]]
what[[3]]
what[[4]]
what[[5]]
what[[6]]
what[[7]]
what[[]]
what[[8]]
what[[9]]
what[[10]]
what[1]
what[10]
what[5]
what$layout
what$colnames
what$grobs
what$grobs
what = plot_model(mdl1full_cont, type="int")
int_plots = plot_model(lme_mdl, type="int", mdrt.values="meansd", title="Predicted probabilities of Object-Present response")
int_plots = plot_model(mdl1full_cont, type="int", mdrt.values="meansd", title="Predicted probabilities of Object-Present response")
int_plots
x <- c(0, 0, 1, 1, 1, 1)
y <- c(1, 0, 1, 1, 0, 1)
dist(rbind(x, y), method = "binary")
?dist
?rep
rep(1,4)
rep(0, 10)
rep(0, 12)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Code")
c(rep(0, 12), rep(1000, 12), rep(2000, 12), rep(3000, 12), rep(4000, 12))
c(rep(0, 12), rep(1000, 12), rep(2000, 12), rep(3000, 13), rep(4000, 13))
delay_vec = c(rep(0, 12), rep(1000, 12), rep(2000, 12), rep(3000, 13), rep(4000, 13))
length(delay_vec)
?matrix
unique_vals = unique(delay_vec)
unique_vals[0]
unique_vals[1]
unique_vals[2]
unique_vals[3]
unique_vals[4]
unique_vals[5]
unique_vals[6]
for (i in length(unique_vals):-1:1) {
print(i)
}
length(unique_vals)
for (i in length(unique_vals):-1:1) {
print(i)
}
for (i in length(unique_vals):1) {
print(i)
}
unique_vals[-1]
shift_vals = c(unique_vals[-1], unique_vals[1])
shift_vals
shift_vals = unique_vals
shift_vals = c(shift_vals[-1], shift_vals[1])
shift_vals
shift_vals = c(shift_vals[-1], shift_vals[1])
shift_vals
for (i in length(unique_vals):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
ifelse(unique_vals == unique_vals[i], shift_vals[i], unique_vals)
}
for (i in length(unique_vals):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
output = ifelse(unique_vals == unique_vals[i], shift_vals[i], unique_vals)
}
output
delay_vec = c(rep(0, 12), rep(1000, 12), rep(2000, 12), rep(3000, 13), rep(4000, 13))
unique_vals = unique(delay_vec)
shift_vals = unique_vals
for (i in length(unique_vals):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
output = ifelse(delay_vec == unique_vals[i], shift_vals[i], delay_vec)
}
output
?ifelse
delay_vec = c(rep(0, 12), rep(1000, 12), rep(2000, 12), rep(3000, 13), rep(4000, 13))
vals = unique(delay_vec)
shift_vals = vals
shift_vals
vals = unique(delay_vec)
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
output = matrix()
for (i in length(vals):1) {
output = cbind(output, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
shift_vals = c(shift_vals[-1], shift_vals[1])
}
?matrix
output = matrix(delay_vec)
for (i in length(vals):1) {
output = cbind(output, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
shift_vals = c(shift_vals[-1], shift_vals[1])
}
output
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
output = matrix(delay_vec)
for (i in length(vals)-1:1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
output = cbind(output, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
output
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
output = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
output = cbind(output, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
output
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_mat
delay_mat = as.data.frame(delay_mat)
delay_mat
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_mat
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input")
read.csv('ROIs.csv')
delay_df = data.frame('delay_mat')
delay_df = data.frame(delay_mat)
delay_df
data = cbind(data, delay_df)
data = read.csv('ROIs.csv')
head(data)
for (image in unique(data$first_image)) {
print(image)
}
data$delay = 0
which(data$first_image == "Scene62_CON.png")
data[which(data$first_image == "Scene62_CON.png"),]
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input")
data = read.csv('ROIs.csv')
data = cbind(data, delay_df)
head(delay_df)
head(data)
matrix(1, nrow=5, ncol = 621)
data = cbind(data, matrix(1, nrow=5, ncol = 621))
size(data)
dim(data)
data = cbind(data, matrix(1, nrow=621, ncol = 5))
data
data[1]
data$1
data$`1`
data$`2`
data$`3`
data[which(data$first_image == Scene1_CON.png),c('1','2','3','4','5')]
data[which(data$first_image == 'Scene1_CON.png'),c('1','2','3','4','5')]
delay_df[i,]
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input")
data = read.csv('ROIs.csv')
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),c('1','2','3','4','5')] = delay_df[i,]
}
data
tail(data)
names(data)[-length(vals)]
names(data)
length(vals)
names(data)[-5]
}
names(data)[ncols(data)-length(vals):]
names(data)[ncols(data)-length(vals):]
names(data)[ncols(data)-length(vals):ncols(data)]
?ncols
?ncol
names(data)[ncol(data)-length(vals):ncol(data)]
names(data)[(ncol(data)-length(vals)):ncol(data)]
names(data)[(ncol(data)-length(vals)+1):ncol(data)]
as.character(1:length(vals))
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input")
data = read.csv('ROIs.csv')
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)]
data
?paste
paste('delay', 1:5)
paste0('delay', 1:5)
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input")
data = read.csv('ROIs.csv')
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
data
tail(data)
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input")
data = read.csv('ROIs.csv')
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
write.csv('ROIs_w_delay.csv', data)
?write.csv
write.csv2('ROIs_w_delay.csv', data)
write.csv('ROIs_w_delay.csv', data)
data
str(data)
