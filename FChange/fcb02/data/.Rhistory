#### super data set up
super_data = data %>%
filter(Consistent != "AttentionCheck", substr(test_condition, 1, 5) == "super")
s_norm_dat = read.csv("s_norm.csv") # Load in norming data
super_data$SceneImage = substr(super_data$SceneImage,1,nchar(super_data$SceneImage)-4)
stopifnot(all(s_norm_dat$scene %in% super_data$SceneImage)) # Check that all scene names match
s_norm_dat$consistency = gsub(" ", "", paste(s_norm_dat$consistency,'sistent',''), fixed = TRUE)
super_data = merge(super_data, s_norm_dat, by.x=c("Consistent", "SceneImage"), by.y=c("consistency","scene"))
stopifnot(all(super_data$probe.x == super_data$probe.y)) # Check that everything is merged correctly
#### Merge basic and super data
full_data = rbind(basic_data, super_data)
#### General Preprocessing
full_data$level = ifelse(substr(full_data$test_condition, 1, 5) == "basic","Basic","Super")
full_data$level = as.factor(full_data$level)
full_data$response = as.factor(full_data$response)
full_data$test_condition = as.factor(full_data$test_condition)
full_data$Inverted = as.factor(full_data$Inverted)
full_data$SceneImage = as.factor(full_data$SceneImage)
full_data$sbj_id = as.factor(full_data$sbj_id)
full_data$Duration = factor(full_data$Duration, ordered=TRUE)
full_data$rating = scale(full_data$rating)
full_data$Consistent = factor(full_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
#### basic data preprocessing
basic_data$response = as.factor(basic_data$response)
basic_data$test_condition = as.factor(basic_data$test_condition)
basic_data$Inverted = as.factor(basic_data$Inverted)
basic_data$SceneImage = as.factor(basic_data$SceneImage)
basic_data$sbj_id = as.factor(basic_data$sbj_id)
basic_data$rating = scale(basic_data$rating)
basic_data$Duration = factor(basic_data$Duration, ordered=TRUE)
basic_data$Consistent = factor(basic_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
#### super data preprocessing
super_data$response = as.factor(super_data$response)
super_data$test_condition = as.factor(super_data$test_condition)
super_data$Inverted = as.factor(super_data$Inverted)
super_data$SceneImage = as.factor(super_data$SceneImage)
super_data$sbj_id = as.factor(super_data$sbj_id)
super_data$rating = scale(super_data$rating)
super_data$Duration = factor(super_data$Duration, ordered=TRUE)
super_data$Consistent = factor(super_data$Consistent, levels=c("Inconsistent", "Consistent"), labels=c("No", "Yes"))
str(full_data)
str(basic_data)
str(super_data)
?plot_model
load("/Users/alanzhihaolu/Documents/Graduate Files/InvertedScenes/invertedScenes-data/Final_Analyses_v2_cache/html/mdl1full_cont_c194656b51385da6a20bbcdf3c4f11b2.RData")
mdl1full_cont
load("/Users/alanzhihaolu/Documents/Graduate Files/InvertedScenes/invertedScenes-data/Final_Analyses_v2_cache/html/mdl1full_e382ec559d1c91c88c4cae709258f697.RData")
load("/Users/alanzhihaolu/Documents/Graduate Files/InvertedScenes/invertedScenes-data/Final_Analyses_v2_cache/html/mdl2full_244b290139059033624025186254c04a.RData")
mdl1full_cont = glmer(response ~ rating*Inverted*Duration*level +
(Inverted*rating | sbj_id) + (Inverted*rating | SceneImage),
data = full_data, family = binomial,
control = glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e5)))
summary(mdl1full_cont)
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what = get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
M = get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
M
M = get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
M
?get_model_data
M = get_model_data(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))
M
plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what = plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what
what
what[[1]]
what = plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
what
get_model_data(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
plot_model(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))[[1]]
plot_model(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))
what = plot_model(mdl1full_cont, type="int", terms=c("rating", "Inverted", "Duration", "level"))[[11]]
what
what = plot_model(mdl1full_cont, type="pred", terms=c("rating", "Inverted", "Duration", "level"))
what
what[[1]]
what[[2]]
what[[3]]
what[[4]]
what[[5]]
plot_model(mdl2full_cont, type="int")[[1]]
plot_model(mdl1full_cont, type="int")[[1]]
what = summary(mdl1full_cont)
what$coefficients
ranef(mdl1full_cont)
summary(mdl1full_cont)@REmat
VarCorr(mdl1full_cont)
what = VarCorr(mdl1full_cont)
what
what$sbj_id
what$sbj_id$stddev
nani - what$sbj_id
nani = what$sbj_id
nani$
a
what$SceneImage
attributes(what)
attributes(what$SceneImage)
attributes(what$SceneImage)$stddev
attributes(what$sbj_id)$stddev
summary(mdl1full_cont)
attributes(what$sbj_id)$stddev
kable(VarCorr(mdl1full_cont))
knitr::kable(VarCorr(mdl1full_cont))
print(VarCorr(mdl))
print(VarCorr(mdl1full_cont))
plot_model(mdl1full_cont)
what = plot_model(mdl1full_cont, type="int")[[1]]
what$data
what = plot_model(mdl1full_cont, type="pred",terms=c("rating","Inverted","Duration","level"))
what
what = get_model_data(mdl1full_cont, type="pred",terms=c("rating","Inverted","Duration","level"))
what = plot_model(mdl1full_cont, type="pred",terms=c("rating","Inverted","Duration","level"))
D
what[[1]]
what[[2]]
what[[3]]
what[[4]]
what[[5]]
what[[6]]
what[[7]]
what[[]]
what[[8]]
what[[9]]
what[[10]]
what[1]
what[10]
what[5]
what$layout
what$colnames
what$grobs
what$grobs
what = plot_model(mdl1full_cont, type="int")
int_plots = plot_model(lme_mdl, type="int", mdrt.values="meansd", title="Predicted probabilities of Object-Present response")
int_plots = plot_model(mdl1full_cont, type="int", mdrt.values="meansd", title="Predicted probabilities of Object-Present response")
int_plots
x <- c(0, 0, 1, 1, 1, 1)
y <- c(1, 0, 1, 1, 0, 1)
dist(rbind(x, y), method = "binary")
?dist
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
write.csv('~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', data)
str(data)
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
write.csv('~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', data)
data
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
data = read.csv("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
write.csv('~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', data)
data
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
data = read.csv("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
data = read.csv("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
delay_df = data.frame(delay_mat)
delay_mat = matrix(delay_vec)
c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13))
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_vec = c(rep(vals[1], 12), rep(vals[2], 12),
rep(vals[3], 12), rep(vals[4], 13),
rep(vals[5], 13))
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
data = read.csv("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
write.csv('~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', data)
data
write.table('~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', data)
write.csv('~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIdelay.csv', data)
write.csv(data, '~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv')
write.csv(data, '~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', row.names = FALSE)
vals = c(0, 1000, 2000, 3000, 4000)
shift_vals = vals
delay_vec = c(rep(vals[1], 12), rep(vals[2], 12),
rep(vals[3], 12), rep(vals[4], 13),
rep(vals[5], 13))
delay_mat = matrix(delay_vec)
for (i in (length(vals)-1):1) {
shift_vals = c(shift_vals[-1], shift_vals[1])
delay_mat = cbind(delay_mat, c(rep(shift_vals[1], 12), rep(shift_vals[2], 12),
rep(shift_vals[3], 12), rep(shift_vals[4], 13),
rep(shift_vals[5], 13)))
}
delay_df = data.frame(delay_mat)
data = read.csv("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs.csv")
data = cbind(data, matrix(1, nrow=621, ncol = length(vals)))
unique_images = unique(data$first_image)
for (i in 1:length(unique_images)) {
data[which(data$first_image == unique_images[i]),as.character(1:length(vals))] = delay_df[i,]
}
names(data)[(ncol(data)-length(vals)+1):ncol(data)] = paste0('delay',1:length(vals))
write.csv(data, '~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/main/Input/ROIs_w_delay.csv', row.names = FALSE)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
data$sbj_id %>% unique()
data$cond %>% unique()
data %>% group_by(sbj_id, cond) %>% summarize(count = n())
data %>% group_by(cond) %>% summarize(count = n(sbj_id))
n()
data %>% group_by(cond) %>% summarize(count = length(sbj_id))
data$first_image
data = data %>% filter(first_image == "example_a.jpg")
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image == "example_a.jpg")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
# outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
#
# data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
boxplot(data$rt ~ data$change_onset_alt)
library(lme4)
data
data$change_onset_alt %>% typeof
data$change_onset_alt %>% factor(ordered=T)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data$change_onset_alt = data$change_onset_alt %>% factor(ordered=T)
str(data)
data$sbj_id = data$sbj_id %>% factor()
data$first_image = data$first_image %>% factor()
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data = data %>% filter(hit == "true")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
lmer(response ~ Inverted*Consistent*Duration*level + (Consistent + Inverted | sbj_id) + (Consistent + Inverted | SceneImage), data = full_data, family = binomial, control = glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e5)))
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data = data %>% filter(hit == "true")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data = data %>% filter(hit == "true")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
mean(data$hit=='true')
data$change_onset_alt = data$change_onset_alt %>% factor(ordered=T)
data$sbj_id = data$sbj_id %>% factor()
data$first_image = data$first_image %>% factor()
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
data$change_onset_alt = data$change_onset_alt %>% factor(ordered=T)
data$sbj_id = data$sbj_id %>% factor()
data$first_image = data$first_image %>% factor()
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data = data %>% filter(hit == "true")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
data$change_onset_alt = data$change_onset_alt %>% factor(ordered=T)
data$sbj_id = data$sbj_id %>% factor()
data$first_image = data$first_image %>% factor()
data %>% str()
data
lme_mdl = lmer(rt ~ change_onset_alt + (change_onset_alt | sbj_id) + (change_onset_alt | first_image), data = change_onset_alt)
---
title: "test"
output: html_document
---
```{r setup, include=FALSE}
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data = data %>% filter(hit == "true")
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
data$change_onset_alt = data$change_onset_alt %>% factor(ordered=T)
data$sbj_id = data$sbj_id %>% factor()
data$first_image = data$first_image %>% factor()
```
## Including Plots
You can also embed plots, for example:
```{r lme_mdl, echo=FALSE, cache=TRUE}
lme_mdl = lmer(rt ~ change_onset_alt + (change_onset_alt | sbj_id) + (change_onset_alt | first_image), data = data)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
lme_mdl
lme_mdl
summary(lme_mdl)
setwd("~/Documents/Graduate Files/ChangeBlindness/FChange/fcb02/data")
library(tidyverse)
library(lme4)
data = read.csv('fcb02-pilot_2021_10_04.csv')
data = data[-c(64:126),]
data = data %>% filter(first_image != "example_a.jpg")
data = data %>% filter(hit == "true")
outliers = boxplot(data$rt ~ data$change_onset_alt, plot=FALSE)$out
data = data[-which(data$rt %in% outliers),]
what = data %>%
group_by(change_onset_alt) %>%
summarize(rt = mean(rt))
boxplot(data$rt ~ data$change_onset_alt)
plot(what$rt ~ what$change_onset_alt)
data$change_onset_alt = data$change_onset_alt %>% factor(ordered=F)
data$sbj_id = data$sbj_id %>% factor()
data$first_image = data$first_image %>% factor()
lme_mdl = lmer(rt ~ change_onset_alt + (change_onset_alt | sbj_id) + (change_onset_alt | first_image), data = data)
summary(lme_mdl)
